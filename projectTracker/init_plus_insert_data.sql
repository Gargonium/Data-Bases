create table manager
(
    id         int primary key generated by default as identity,
    name       varchar(30) not null,
    surname    varchar(30) not null,
    patronymic varchar(30)
);

create table project
(
    id                 int primary key generated by default as identity,
    project_name       varchar(100)                                        not null,
    planned_start_date date                                                not null,
    planned_end_date   date check (planned_end_date >= planned_start_date) not null,
    project_manager_id int references manager (id)                         not null
);

create table task
(
    id                    int primary key generated by default as identity,
    task_name             varchar(30)                                         not null,
    task_statement        varchar(300)                                        not null,
    start_date            date                                                not null,
    end_date              date check (end_date >= start_date)                 not null,
    completion_percentage int check (completion_percentage between 0 and 100) not null,
    parent_project_id     int references project (id)                         not null
);

create table programmer
(
    id             int primary key generated by default as identity,
    name           varchar(30) not null,
    surname        varchar(30) not null,
    patronymic     varchar(30),
    specialization varchar(30) not null
);

create table assignment
(
    id            int primary key generated by default as identity,
    task_id       int references task (id)               not null,
    programmer_id int references programmer (id)         not null,
    workload      int check (workload between 0 and 100) not null,
    unique (task_id, programmer_id)
);

create or replace function check_task_dates()
    returns trigger as
$$
begin
    if new.start_date < (select planned_start_date from project where id = new.parent_project_id) then
        raise exception 'start_date must be greater than or equal to planned_start_date of the project';
    end if;

    if new.end_date > (select planned_end_date from project where id = new.parent_project_id) then
        raise exception 'end_date must be less than or equal to planned_end_date of the project';
    end if;

    return new;
end;
$$ language plpgsql;

create trigger validate_task_dates
    before insert or update
    on task
    for each row
execute function check_task_dates();

-- Наполнение данными
-- Наполнение таблицы manager
INSERT INTO manager (surname, name, patronymic)
VALUES ('Иванов', 'Петр', 'Сергеевич'),
       ('Оракулов', 'Николай', 'Иванович'),
       ('Петров', 'Иван', 'Николаевич'),
       ('Николаев', 'Семен', 'Викторович');

-- Наполнение таблицы project
INSERT INTO project (project_name, planned_start_date, planned_end_date, project_manager_id)
VALUES ('Альфа 1', '2002-12-15', '2003-10-25', 1),
       ('МобайлСервис', '2002-11-18', '2003-04-07', 2),
       ('Альфа 1 Веб', '2002-12-25', '2003-05-09', 1),
       ('ТорговыйЦентр.ру', '2002-12-18', '2003-08-12', 3),
       ('СибирьПортал', '2002-07-15', '2002-12-18', 2);

-- Наполнение таблицы programmer
INSERT INTO programmer (surname, name, patronymic, specialization)
VALUES ('Сидоров', 'Павел', 'Семенович', 'С++'),
       ('Антонов', 'Николай', 'Сергеевич', 'java'),
       ('Умнов', 'Виталий', 'Игнатьевич', 'web'),
       ('Ларинов', 'Семен', 'Валерьевич', 'С++'),
       ('Тредов', 'Петр', 'Витальевич', 'С++'),
       ('Хаба', 'Иван', 'Петрович', 'php'),
       ('Сидоров', 'Никита', 'Сергеевич', 'java');

-- Наполнение таблицы task
INSERT INTO task (task_name, task_statement, start_date, end_date, completion_percentage, parent_project_id)
VALUES ('Требования', 'Согласовать и описать требования', '2002-12-15', '2002-12-25', 80, 1),
       ('Проект БД', 'Разработать структуру БД', '2002-12-19', '2003-01-15', 13, 1),
       ('Интерфейсы', 'Разработать описание интерфейсов', '2002-12-19', '2003-01-15', 5, 1),
       ('Модуль 1', 'Реализовать модуль 1', '2003-01-15', '2003-02-25', 0, 1),
       ('Модуль 2', 'Реализовать модуль 2', '2003-01-25', '2003-08-15', 0, 1),
       ('Перепроектирование', 'Перепроектировать базу данных', '2002-12-18', '2003-01-18', 35, 4),
       ('Интеграция', 'Интегрировать все модули', '2002-10-15', '2002-11-15', 100, 5),
       ('Комплексное тестирование', 'Протестировать систему полностью', '2002-11-15', '2002-12-15', 100, 5);

-- Наполнение таблицы assignment
INSERT INTO assignment (task_id, programmer_id, workload)
VALUES (1, 1, 60),
       (1, 6, 40),
       (4, 4, 100),
       (5, 3, 100),
       (5, 2, 100),
       (2, 5, 100),
       (1, 2, 30),
       (5, 6, 10);

